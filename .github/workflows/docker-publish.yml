name: Docker publish

on:
  schedule:
    - cron: '45 0 * * *'
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
      - 'master'

jobs:

  build-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - TraderEngine.API
          - TraderEngine.CLI
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3.0
        with:
          versionSpec: '5.x'
      -
        name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0
      -
        name: Print GitVersion
        run: |
          echo "major:                           ${{ steps.gitversion.outputs.major }}"
          echo "minor:                           ${{ steps.gitversion.outputs.minor }}"
          echo "patch:                           ${{ steps.gitversion.outputs.patch }}"
          echo "preReleaseTag:                   ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "preReleaseTagWithDash:           ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "preReleaseLabel:                 ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "preReleaseNumber:                ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "weightedPreReleaseNumber:        ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "buildMetaData:                   ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "fullBuildMetaData:               ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "majorMinorPatch:                 ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "semVer:                          ${{ steps.gitversion.outputs.semVer }}"
          echo "assemblySemVer:                  ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "assemblySemFileVer:              ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "fullSemVer:                      ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "informationalVersion:            ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "branchName:                      ${{ steps.gitversion.outputs.branchName }}"
          echo "escapedBranchName:               ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "sha:                             ${{ steps.gitversion.outputs.sha }}"
          echo "shortSha:                        ${{ steps.gitversion.outputs.shortSha }}"
          echo "versionSourceSha:                ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "commitsSinceVersionSource:       ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "commitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "uncommittedChanges:              ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "commitDate:                      ${{ steps.gitversion.outputs.commitDate }}"
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.CR_REGISTRY }}/${{ matrix.project }}
          tags: |
            type=schedule,pattern=nightly
            type=raw,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }},value=nightly
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      -
        name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8'
      # -
      #   name: Restore NuGet packages
      #   run: dotnet restore "TraderEngine.API.csproj"
      # -
      #   name: Run unit tests
      #   run: dotnet test "${{ matrix.project }}Tests/*.csproj" -c Debug
      -
        name: Publish release build
        run: dotnet publish "${{ matrix.project }}/${{ matrix.project }}.csproj" -c Release /p:UseAppHost=false
      -
        name: Login to Docker CR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CR_REGISTRY }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PASSWORD }}
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      -
        name: Build and push ${{ matrix.project }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.project }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
